// cdecl.gr
// demonstration of resolving C ident/type ambiguity
// cdecl solves it using reduction cancellation (cf. cdecl2)

verbatim [

#include <iostream>        // std::cout
#include <unordered_set>   // std::unordered_set
#include <vector>          // std::vector

#include "algo.h"          // sm::contains
#include "trace.h"         // trace
#include "locstr.h"        // LocString
#include "parssppt.h"      // ParseTreeAndTokens

#define D(msg) \
  trace("cdecl") << msg << std::endl
#define R0 return 0

]

// parsing action state
context_class ParseEnv : public UserActions {
private:
  StringTable &table;

public:
  StringRef intType;               // "int"
  std::vector<std::unordered_set<string_view> *> types;
                                   // stack of hashes which identify names of types

public:
  ParseEnv(StringTable &table);
  ~ParseEnv();

  void enterScope();
  void leaveScope();
  void addType(string_view type);
  bool isType(string_view name);
};


impl_verbatim [

#include "xassert.h"

// StringHash here is collecting references to
// strings interned in a StringTable

using StringHash = std::unordered_set<string_view>;

// bit of a hack..
ParseTables *tables;

class CCLang;
UserActions *makeUserActions(StringTable &table, CCLang &lang)
{
  ParseEnv *ret = new ParseEnv(table);
  tables = ret->makeTables();
  return ret;
}

ParseTables *makeParseTables()
{
  return tables;
}


ParseEnv::ParseEnv(StringTable &table) : table(table)
{
  intType = table.add("int");
}

ParseEnv::~ParseEnv()
{
  for (StringHash *type : types) {
    delete type;
  }
}


void ParseEnv::enterScope()
{
  types.push_back(new StringHash());
}

void ParseEnv::leaveScope()
{
  delete types.back();
  types.pop_back();
}

void ParseEnv::addType(string_view type)
{
  // ensure that the type is an interned string
  xassert(table.get(type) != nullptr);

  StringHash *h = types.back();
  if (sm::contains(*h, type)) {
    std::cout << "duplicate entry for " << type << " -- will ignore\n";
  }
  else {
    h->insert(type);
  }
}

bool ParseEnv::isType(string_view name)
{
  if (name == intType) {
    return true;
  }

  for (StringHash const *type : types) {
    if (sm::contains(*type, name)) {
      return true;
    }
  }
  return false;
}


#if 0
void doit(int argc, char **argv)
{
  traceAddSys("progress");
  //traceAddSys("parse-tree");

  SemanticValue treeTop;
  ParseTreeAndTokens tree(treeTop);
  ParseEnv env(tree);
  treeMain(tree, argc, argv);

  std::cout << "final parse result: " << treeTop << std::endl;
}

int main(int argc, char **argv)
{
  doit(argc, argv);

  //malloc_stats();

  return 0;
}
#endif // 0

] // end impl_verbatim


terminals {
  // grab the lexer's token list
  include("../../c/c.tok")

  token[StringRef] L2_NAME {
    fun dup(s) [ return s; ]
    fun del()  []
  }
}


nonterm[int] Start -> Stmts  [
  D("exiting scope");
  leaveScope();
  R0;
]

nonterm[int] Stmts {
  -> empty         [ D("entering scope"); enterScope(); R0; ]
  -> Stmts Stmt    [ R0; ]
}

nonterm[int] Stmt {
  -> t:TypeName "(" n:VarName ")" ";"   [    // declaration
       D("declaration of " << n << ", type " << t); R0;
     ]

  -> f:VarName "(" a:VarName ")" ";"    [    // function call
       D("call of " << f << " with arg " << a); R0;
     ]

  -> "typedef" t:TypeName n:L2_NAME ";" [    // typedef: introduce type name
       D("typedef of " << n << " as type " << t);
       addType(n);
       R0;
     ]

  -> "{" Stmts "}"                      [    // scope
       D("exiting scope"); leaveScope(); R0;
     ]
}

nonterm[StringRef] VarName {
  fun keep(n)      [ return !isType(n); ]

  -> n:L2_NAME     [ return n; ]
}

nonterm[StringRef] TypeName {
  fun keep(n)      [ return isType(n); ]

  -> n:L2_NAME     [ return n; ]

  // this is a little bit of a hack, but in some sense it's valid
  // to regard the global strings as another stringtable.. of course,
  // equality won't work, but I don't need it for the moment
  -> L2_INT        [ return intType; ]
}

